from controller import Robot, GPS, InertialUnit, Gyro, Motor
import math
import random
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Initialize the robot
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# Devices
imu = robot.getDevice("inertial unit")
imu.enable(timestep)

gps = robot.getDevice("gps")
gps.enable(timestep)

gyro = robot.getDevice("gyro")
gyro.enable(timestep)

motors = [
    robot.getDevice("front left propeller"),
    robot.getDevice("front right propeller"),
    robot.getDevice("rear left propeller"),
    robot.getDevice("rear right propeller")
]
for motor in motors:
    motor.setPosition(float('inf'))  # Set to velocity control mode
    motor.setVelocity(0.0)

# PID Constants
k_vertical_thrust = 68.0
k_vertical_offset = 0.6
k_vertical_p = 4.0  # Increased for faster response
k_roll_p, k_roll_d = 30.0, 10.0
k_pitch_p, k_pitch_d = 30.0, 10.0
k_x_p, k_x_d = 0.1, 0.1  # X stabilization
k_y_p, k_y_d = 0.1, 0.1  # Y stabilization
k_yaw_p = 3.0  # Yaw stabilization

# State Variables
target_altitude = 3.0
altitude_tolerance = 0.1
current_state = "Grounded"
hovering = False

# Clamp function
def clamp(value, low, high):
    return max(low, min(value, high))

# State Machine Functions
def transition_to_hover():
    global current_state, hovering
    if current_state == "Take-Off" and abs(gps.getValues()[2] - target_altitude) <= altitude_tolerance:
        current_state = "Hover"
        hovering = True
        print("Transitioned to Hover state.")

def transition_to_take_off():
    global current_state
    if current_state == "Grounded" and target_altitude > 0.5:
        current_state = "Take-Off"
        print("Transitioned to Take-Off state.")

# Stabilize the quadrotor
def stabilize_drone():
    roll, pitch, yaw = imu.getRollPitchYaw()
    gps_values = gps.getValues()
    altitude = gps_values[2]
    x_position, y_position = gps.getValues()[0], gps.getValues()[1]
    roll_velocity, pitch_velocity = gyro.getValues()[0], gyro.getValues()[1]

    # Altitude stabilization
    altitude_error = target_altitude - altitude + k_vertical_offset
    vertical_input = k_vertical_p * clamp(altitude_error, -1.0, 1.0) ** 3

    # X and Y position stabilization
    x_input = k_x_p * (-x_position) + k_x_d * (-x_position / timestep)
    y_input = k_y_p * (-y_position) + k_y_d * (-y_position / timestep)

    # Roll, pitch, and yaw stabilization
    roll_input = k_roll_p * clamp(roll, -1.0, 1.0) + k_roll_d * roll_velocity + x_input
    pitch_input = k_pitch_p * clamp(pitch, -1.0, 1.0) + k_pitch_d * pitch_velocity + y_input
    yaw_input = -k_yaw_p * yaw  # Keep yaw stable

    # Motor inputs
    front_left_motor_input = k_vertical_thrust + vertical_input - roll_input + pitch_input - yaw_input
    front_right_motor_input = k_vertical_thrust + vertical_input + roll_input + pitch_input + yaw_input
    rear_left_motor_input = k_vertical_thrust + vertical_input - roll_input - pitch_input + yaw_input
    rear_right_motor_input = k_vertical_thrust + vertical_input + roll_input - pitch_input - yaw_input

    # Clamp and actuate motors
    for motor, value in zip(motors, [front_left_motor_input, -front_right_motor_input, -rear_left_motor_input, rear_right_motor_input]):
        motor.setVelocity(clamp(value, -100.0, 100.0))

# PSO Optimization
def pso_optimization():
    particles = [
        {
            "position": {key: [random.uniform(0.0, 5.0) for _ in range(3)] for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]},
            "velocity": {key: [random.uniform(-1.0, 1.0) for _ in range(3)] for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]},
            "best_position": None,
            "best_fitness": float('inf'),
        }
        for _ in range(10)
    ]
    global_best_position = None
    global_best_fitness = float('inf')
    history_gains = {key: {"Kp": [], "Ki": [], "Kd": []} for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]}

    # PSO iterations
    for iteration in range(70):
        for particle in particles:
            # Simulate fitness (replace with actual fitness calculation logic)
            fitness = random.uniform(0, 1)
            if fitness < particle["best_fitness"]:
                particle["best_fitness"] = fitness
                particle["best_position"] = particle["position"]

            if fitness < global_best_fitness:
                global_best_fitness = fitness
                global_best_position = particle["position"]

        # Update particles
        for particle in particles:
            for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]:
                for i in range(3):
                    r1, r2 = random.random(), random.random()
                    inertia = 0.7 * particle["velocity"][key][i]
                    cognitive = 1.4 * r1 * (particle["best_position"][key][i] - particle["position"][key][i])
                    social = 1.4 * r2 * (global_best_position[key][i] - particle["position"][key][i])
                    particle["velocity"][key][i] = inertia + cognitive + social
                    particle["position"][key][i] += particle["velocity"][key][i]

        # Store the PID values for plotting later
        for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]:
            history_gains[key]["Kp"].append(global_best_position[key][0])
            history_gains[key]["Ki"].append(global_best_position[key][1])
            history_gains[key]["Kd"].append(global_best_position[key][2])

        print(f"Iteration {iteration + 1}/70: Best Fitness {global_best_fitness:.4f}")

    return history_gains, global_best_position

# Main Loop
while robot.step(timestep) != -1:
    if current_state == "Grounded":
        transition_to_take_off()
    elif current_state == "Take-Off":
        transition_to_hover()

    if hovering:
        print("Hovering at 3 meters...")
        history_gains, final_best_position = pso_optimization()  # Begin PSO after stable hover
        hovering = False  # Stop once PSO is complete

    stabilize_drone()
    print(f"Current State: {current_state}, Altitude: {gps.getValues()[2]:.2f} m")

# Plot the Gains
fig, axes = plt.subplots(4, 3, figsize=(15, 10))
axes = axes.flatten()
keys = ["ThrottlePID", "YawPID", "XposPID", "YposPID"]

for i, key in enumerate(keys):
    axes[i*3].plot(range(70), history_gains[key]["Kp"], label="Kp")
    axes[i*3].set_title(f"{key} Kp")
    axes[i*3].set_xlabel("Iteration")
    axes[i*3].set_ylabel("Gain")

    axes[i*3+1].plot(range(70), history_gains[key]["Ki"], label="Ki")
    axes[i*3+1].set_title(f"{key} Ki")
    axes[i*3+1].set_xlabel("Iteration")
    axes[i*3+1].set_ylabel("Gain")

    axes[i*3+2].plot(range(70), history_gains[key]["Kd"], label="Kd")
    axes[i*3+2].set_title(f"{key} Kd")
    axes[i*3+2].set_xlabel("Iteration")
    axes[i*3+2].set_ylabel("Gain")

plt.tight_layout()
plt.show()

# Display the Table with final PID values from PSO experiment
# Extract the final tuned PID values
final_values = {
    "Parameter": [
        "ThrottlePID-Kp", "ThrottlePID-Ki", "ThrottlePID-Kd",
        "YawPID-Kp", "YawPID-Ki", "YawPID-Kd",
        "XposPID-Kp", "XposPID-Ki", "XposPID-Kd",
        "YposPID-Kp", "YposPID-Ki", "YposPID-Kd"
    ],
    "Tuned-avg": [
        np.mean([history_gains[key]["Kp"][-1] for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]]),
        np.mean([history_gains[key]["Ki"][-1] for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]]),
        np.mean([history_gains[key]["Kd"][-1] for key in ["ThrottlePID", "YawPID", "XposPID", "YposPID"]]),
    ]
}

df = pd.DataFrame(final_values)
print("\nTABLE I: Final Particle Disparity for applied PID controls")
print(df.to_string(index=False))
