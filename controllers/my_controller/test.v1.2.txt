from controller import Robot, GPS, InertialUnit, Gyro, Motor
import numpy as np
import matplotlib.pyplot as plt

# PID Controller Class with Anti-Windup
class PIDController:
    def __init__(self, kp, ki, kd, max_integral=10):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.prev_error = 0
        self.integral = 0
        self.max_integral = max_integral

    def compute(self, target, current, dt):
        error = target - current
        self.integral += error * dt
        self.integral = np.clip(self.integral, -self.max_integral, self.max_integral)
        derivative = (error - self.prev_error) / dt if dt > 0 else 0
        self.prev_error = error
        return self.kp * error + self.ki * self.integral + self.kd * derivative

# Function to generate the Pac-Man-shaped path
def pacman_path(t, radius=7.5, period=20, mouth_angle=45):
    theta = (2 * np.pi / period) * t
    mouth_start = np.radians(360 - mouth_angle / 2)
    mouth_end = np.radians(mouth_angle / 2)
    if mouth_start <= theta % (2 * np.pi) <= mouth_end:
        return None
    x_target = radius * np.cos(theta)
    y_target = radius * np.sin(theta)
    return x_target, y_target

# Quadrotor Simulation Class
class QuadrotorSim:
    def __init__(self):
        self.robot = Robot()
        self.timestep = int(self.robot.getBasicTimeStep())

        # Sensors
        self.imu = self.robot.getDevice('inertial unit')
        self.imu.enable(self.timestep)

        self.gps = self.robot.getDevice('gps')
        self.gps.enable(self.timestep)

        self.gyro = self.robot.getDevice('gyro')
        self.gyro.enable(self.timestep)

        # Motors
        self.motors = {
            "front_left": self.robot.getDevice("front left propeller"),
            "front_right": self.robot.getDevice("front right propeller"),
            "rear_left": self.robot.getDevice("rear left propeller"),
            "rear_right": self.robot.getDevice("rear right propeller"),
        }
        for motor in self.motors.values():
            motor.setPosition(float("inf"))  # Motors in velocity control mode (not position control)
            motor.setVelocity(0.0)  # Set motor velocity to 0 initially

        # Target variables
        self.target_altitude = 4.0  # Target altitude (m)
        self.k_vertical_thrust = 100.0  # Increased base thrust for lift-off
        self.k_vertical_offset = 0.6
        self.k_vertical_p = 30.0  # Increased P constant for better altitude control
        self.k_roll_p = 50.0
        self.k_pitch_p = 30.0

        # Mass of the quadrotor (in kg)
        self.mass = 1.5  # Assuming a mass of 1.5 kg
        self.gravity = 9.81  # Acceleration due to gravity (m/s^2)

        # PID Controllers
        self.thrust_pid = PIDController(1.0, 0.1, 0.3)
        self.x_pid = PIDController(1.0, 0.1, 0.3)
        self.y_pid = PIDController(1.0, 0.1, 0.3)

        # Simulation logs
        self.positions = []  # Log positions for trajectory
        self.current_time = 0.0

    def target_path(self, time):
        return pacman_path(time)

    def compute_inputs(self, altitude, roll, pitch, x, y, dt):
        # Compute altitude control
        vertical_input = self.thrust_pid.compute(self.target_altitude, altitude, dt)

        # Compute position control
        target = self.target_path(self.current_time)
        if target:
            x_target, y_target = target
            x_correction = self.x_pid.compute(x_target, x, dt)
            y_correction = self.y_pid.compute(y_target, y, dt)
        else:
            x_correction, y_correction = 0, 0  # No correction during mouth region

        # Log position
        self.positions.append((x, y))

        # Compute stabilization inputs
        roll_input = self.k_roll_p * np.clip(roll, -1.0, 1.0)
        pitch_input = self.k_pitch_p * np.clip(pitch, -1.0, 1.0)

        return vertical_input, roll_input, pitch_input, x_correction, y_correction

    def run_step(self):
        # Get sensor readings
        altitude = self.gps.getValues()[2]
        dt = self.timestep / 1000.0

        # Compute vertical thrust for altitude control
        vertical_input = self.thrust_pid.compute(self.target_altitude, altitude, dt)

        # Default values for roll, pitch, and yaw stabilization (not controlling yet)
        roll_input = 0  # Stabilization placeholder
        pitch_input = 0  # Stabilization placeholder
        yaw_input = 0  # Stabilization placeholder

        # Ensure the base thrust is sufficient to overcome gravity
        base_thrust = self.mass * self.gravity + 50  # Added 50 margin to ensure lift-off

        # Apply vertical thrust correction with a higher base thrust
        front_left_input = base_thrust + vertical_input - roll_input + pitch_input - yaw_input
        front_right_input = base_thrust + vertical_input + roll_input + pitch_input + yaw_input
        rear_left_input = base_thrust + vertical_input - roll_input - pitch_input + yaw_input
        rear_right_input = base_thrust + vertical_input + roll_input - pitch_input - yaw_input

        # Apply motor speeds (ensure thrust is adequate)
        front_left_input = np.clip(front_left_input, 0, 100)  # Limit max speed
        front_right_input = np.clip(front_right_input, 0, 100)
        rear_left_input = np.clip(rear_left_input, 0, 100)
        rear_right_input = np.clip(rear_right_input, 0, 100)

        self.motors["front_left"].setVelocity(front_left_input)
        self.motors["front_right"].setVelocity(front_right_input)
        self.motors["rear_left"].setVelocity(rear_left_input)
        self.motors["rear_right"].setVelocity(rear_right_input)

        # Debug outputs to monitor altitude and vertical thrust
        print(f"Altitude: {altitude}, Vertical Input: {vertical_input}")
        print(f"Motor Speeds: FL={front_left_input}, FR={front_right_input}, RL={rear_left_input}, RR={rear_right_input}")

        # Update simulation time
        self.current_time += dt

    def simulate(self, duration):
        steps = int(duration / (self.timestep / 1000))
        for _ in range(steps):
            if self.robot.step(self.timestep) == -1:
                break
            self.run_step()

    def plot_trajectory(self):
        actual_x, actual_y = zip(*self.positions)
        time_points = np.linspace(0, self.current_time, len(self.positions))
        reference_positions = [pacman_path(t) for t in time_points if pacman_path(t)]
        ref_x, ref_y = zip(*[p for p in reference_positions if p])

        plt.figure(figsize=(10, 6))
        plt.plot(ref_x, ref_y, label="Reference Path", linestyle="--", color="red")
        plt.plot(actual_x, actual_y, label="Quadrotor Path", color="blue")
        plt.xlabel("X Position (m)")
        plt.ylabel("Y Position (m)")
        plt.title("Quadrotor Path Following")
        plt.legend()
        plt.grid()
        plt.show()

# Main simulation
def main():
    sim = QuadrotorSim()
    print("Starting simulation...")
    sim.simulate(duration=30)
    sim.plot_trajectory()
    print("Simulation completed.")

if __name__ == "__main__":
    main()
