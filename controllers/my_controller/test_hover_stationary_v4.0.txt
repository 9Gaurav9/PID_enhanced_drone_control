

from controller import Robot, GPS, InertialUnit, Gyro, Motor, Keyboard
import math
from controller import Keyboard

# Initialize the robot
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# Get and enable devices
imu = robot.getDevice("inertial unit")
imu.enable(timestep)

gps = robot.getDevice("gps")
gps.enable(timestep)

gyro = robot.getDevice("gyro")
gyro.enable(timestep)

keyboard = Keyboard()
keyboard.enable(timestep)

# Propeller motors setup
front_left_motor = robot.getDevice("front left propeller")
front_right_motor = robot.getDevice("front right propeller")
rear_left_motor = robot.getDevice("rear left propeller")
rear_right_motor = robot.getDevice("rear right propeller")

motors = [front_left_motor, front_right_motor, rear_left_motor, rear_right_motor]
for motor in motors:
    motor.setPosition(float('inf'))  # Set to velocity control mode
    motor.setVelocity(0.0)

# Constants (adjusted for stability)
k_vertical_thrust = 68.0  # Adjusted thrust for weight
k_vertical_offset = 0.6  # Offset for altitude stabilization
k_vertical_p = 4.0  # Increased P constant for vertical PID
k_roll_p = 30.0  # Roll PID proportional gain
k_pitch_p = 30.0  # Pitch PID proportional gain
k_roll_d = 10.0  # Roll PID damping
k_pitch_d = 10.0  # Pitch PID damping

# Variables for the flight states and conditions
target_altitude = 3.0  # Target altitude for hovering
altitude_tolerance = 0.1
current_state = "Grounded"  # Initial state is grounded

# State machine functions
def transition_to_hover():
    global current_state
    if current_state == "Take-Off" and abs(gps.getValues()[2] - target_altitude) <= altitude_tolerance:
        current_state = "Hover"
        print("Transitioned to Hover state.")

def transition_to_take_off():
    global current_state
    if current_state == "Grounded" and target_altitude > 0.5:
        current_state = "Take-Off"
        print("Transitioned to Take-Off state.")
        
def clamp(value, low, high):
    """Clamp the value between a minimum and maximum."""
    return max(low, min(value, high))



def handle_yaw_pitch():
    """
    Adjusts yaw and pitch based on keyboard input or other logic.
    The drone will change its yaw and pitch based on input, or
    any preset conditions to follow a target heading or path.
    """
    # Read keyboard input to control yaw and pitch (if user wants to control)
    yaw_disturbance = 0.0
    pitch_disturbance = 0.0

    # If the user presses keys, change yaw/pitch
    key = keyboard.getKey()
    while key > 0:
        if key == Keyboard.RIGHT:  # Turn right (yaw)
            yaw_disturbance = -1.0
        elif key == Keyboard.LEFT:  # Turn left (yaw)
            yaw_disturbance = 1.0
        elif key == Keyboard.UP:  # Pitch forward
            pitch_disturbance = -1.0
        elif key == Keyboard.DOWN:  # Pitch backward
            pitch_disturbance = 1.0
        elif key == (Keyboard.SHIFT + Keyboard.UP):  # Increase altitude
            target_altitude += 0.05
            print(f"Target altitude: {target_altitude:.2f} m")
        elif key == (Keyboard.SHIFT + Keyboard.DOWN):  # Decrease altitude
            target_altitude -= 0.05
            print(f"Target altitude: {target_altitude:.2f} m")
        
        key = keyboard.getKey()

    # Adjust yaw and pitch based on disturbances
    yaw_input = yaw_disturbance
    pitch_input = pitch_disturbance

    # Use yaw and pitch inputs for controlling the drone's movement
    print(f"Yaw disturbance: {yaw_disturbance}, Pitch disturbance: {pitch_disturbance}")

def stabilize_drone():
    # Get sensor readings
    roll, pitch, _ = imu.getRollPitchYaw()
    altitude = gps.getValues()[2]  # Get altitude
    roll_velocity = gyro.getValues()[0]
    pitch_velocity = gyro.getValues()[1]

    # Compute altitude PID for vertical control
    vertical_error = target_altitude - altitude + k_vertical_offset
    vertical_input = k_vertical_p * clamp(vertical_error, -1.0, 1.0) ** 3

    # Compute roll and pitch PID with damping
    roll_input = k_roll_p * clamp(roll, -1.0, 1.0) + k_roll_d * roll_velocity
    pitch_input = k_pitch_p * clamp(pitch, -1.0, 1.0) + k_pitch_d * pitch_velocity

    # Compute yaw control (currently not used in this case)
    yaw_input = 0.0

    # Compute motor inputs
    front_left_motor_input = k_vertical_thrust + vertical_input - roll_input + pitch_input - yaw_input
    front_right_motor_input = k_vertical_thrust + vertical_input + roll_input + pitch_input + yaw_input
    rear_left_motor_input = k_vertical_thrust + vertical_input - roll_input - pitch_input + yaw_input
    rear_right_motor_input = k_vertical_thrust + vertical_input + roll_input - pitch_input - yaw_input

    # Actuate motors
    front_left_motor.setVelocity(front_left_motor_input)
    front_right_motor.setVelocity(-front_right_motor_input)
    rear_left_motor.setVelocity(-rear_left_motor_input)
    rear_right_motor.setVelocity(rear_right_motor_input)

# Main loop
while robot.step(timestep) != -1:
    # Handle state transitions
    if current_state == "Grounded":
        transition_to_take_off()
    elif current_state == "Take-Off":
        transition_to_hover()
    elif current_state == "Hover":
        handle_yaw_pitch()
    
    # Stabilize the drone
    stabilize_drone()

    # Debugging output
    print(f"Current State: {current_state}, Altitude: {gps.getValues()[2]:.2f} m")
